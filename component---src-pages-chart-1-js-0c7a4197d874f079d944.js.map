{"version":3,"sources":["webpack:///./src/components/TVChartContainer/helpers.js","webpack:///./src/components/TVChartContainer/streaming.js","webpack:///./src/components/TVChartContainer/indicators/binance_open_interest.js","webpack:///./src/components/TVChartContainer/datafeed.js","webpack:///./src/components/TVChartContainer/index.js","webpack:///./src/pages/chart1.js"],"names":["makeApiRequest","path","a","fetch","response","json","Error","status","generateSymbol","exchange","fromSymbol","toSymbol","short","full","parseFullSymbol","fullSymbol","match","fragment","socket","io","channelToSubscription","Map","on","console","log","reason","error","data","split","eventTypeStr","tradeTimeStr","tradePriceStr","parseInt","tradePrice","parseFloat","tradeTime","channelString","subscriptionItem","get","undefined","barTime","date","bar","lastDailyBar","nextDailyBarTime","time","Date","setDate","getDate","getTime","open","high","low","close","Math","max","min","handlers","forEach","handler","callback","PineJS","name","metainfo","_metainfoVersion","id","description","shortDescription","scriptIdPart","is_price_study","is_hidden_study","isCustomIndicator","isTVScript","isTVScriptStub","inputs","plots","type","defaults","styles","plot_0","linestyle","visible","linewidth","plottype","trackPrice","transparency","color","plot_hidden","isHidden","precision","title","histogramBase","constructor","this","init","context","input","_context","_input","period","Std","t","symbol","ticker","substring","length","new_sym","main","select_sym","makeReq","endpoint","limit","proxy","res","ok","statusText","lastBarsCache","configurationData","supported_resolutions","exchanges","value","desc","symbols_types","getAllSymbols","allSymbols","pairs","Data","leftPairPart","symbols","map","rightPairPart","full_name","Object","keys","onReady","setTimeout","searchSymbols","userInput","symbolType","onResultReadyCallback","newSymbols","filter","isExchangeValid","isFullSymbolContainsInput","toLowerCase","indexOf","resolveSymbol","symbolName","onSymbolResolvedCallback","onResolveErrorCallback","symbolInfo","session","timezone","minmov","pricescale","has_intraday","has_no_volume","has_weekly_and_monthly","volume_precision","data_status","symbolItem","find","getBars","resolution","from","to","onHistoryCallback","onErrorCallback","firstDataRequest","parsedSymbol","bars","b","timestamp","timstamp","sumOpenInterest","noData","urlParameters","e","fsym","tsym","toTs","query","encodeURIComponent","join","Response","set","subscribeBars","onRealtimeCallback","subscribeUID","onResetCacheNeededCallback","push","emit","subs","subscribeOnStream","unsubscribeBars","subscriberUID","handlerIndex","findIndex","splice","delete","unsubscribeFromStream","widget","loadable","ssr","TVChartContainer","tvWidget","componentDidMount","results","widgetOptions","props","datafeed","Datafeed","interval","container_id","containerId","library_path","libraryPath","locale","RegExp","exec","window","location","search","decodeURIComponent","replace","disabled_features","enabled_features","charts_storage_url","chartsStorageUrl","charts_storage_api_version","chartsStorageApiVersion","client_id","clientId","user_id","userId","fullscreen","autosize","studies_overrides","studiesOverrides","custom_indicators_getter","customIndicatorsGetter","onChartReady","headerReady","then","button","createButton","setAttribute","classList","add","addEventListener","showNoticeDialog","body","innerHTML","chart","createStudy","componentWillUnmount","remove","render","className","React","defaultProps","Promise","resolve","BinanceOI","Chart1","Layout","includePreFooter","Component"],"mappings":"+sBACO,SAAeA,EAAtB,kC,kCAAO,WAA+BC,GAA/B,eAAAC,EAAA,+EAEoBC,MAAM,qCAAqCF,GAF/D,cAEGG,EAFH,yBAGIA,EAASC,QAHb,sCAKG,IAAIC,MAAJ,gCAA0C,KAAMC,QALnD,0D,sBAUA,SAASC,EAAgBC,EAAUC,EAAYC,GACpD,IAAMC,EAAWF,EAAN,IAAoBC,EAC/B,MAAO,CACLC,QACAC,KAASJ,EAAL,IAAiBG,GAIlB,SAASE,EAAiBC,GAC/B,IAAMC,EAAQD,EAAWC,MAAM,mCAC/B,OAAKA,EAIE,CACLP,SAAUO,EAAM,GAChBN,WAAYM,EAAM,GAClBL,SAAUK,EAAM,GAChBC,SAAUD,EAAM,IAPT,K,myBCpBX,IAAME,EAASC,GAAG,oCACZC,EAAwB,IAAIC,IAElCH,EAAOI,GAAG,WAAW,WACnBC,QAAQC,IAAI,yBAGdN,EAAOI,GAAG,cAAc,SAACG,GACvBF,QAAQC,IAAI,yBAA0BC,MAGxCP,EAAOI,GAAG,SAAS,SAACI,GAClBH,QAAQC,IAAI,kBAAmBE,MAGjCR,EAAOI,GAAG,KAAK,SAAAK,GACbJ,QAAQC,IAAI,oBAAqBG,GADZ,MAYjBA,EAAKC,MAAM,KATbC,EAHmB,KAInBpB,EAJmB,KAKnBC,EALmB,KAMnBC,EANmB,KASnBmB,EATmB,KAWnBC,EAXmB,KAcrB,GAA+B,IAA3BC,SAASH,GAAb,CAIA,IAAMI,EAAaC,WAAWH,GACxBI,EAAYH,SAASF,GACrBM,EAAa,KAAQ3B,EAAR,IAAoBC,EAApB,IAAkCC,EAC/C0B,EAAmBjB,EAAsBkB,IAAIF,GACnD,QAAyBG,IAArBF,EAAJ,CAGA,IA4B4BG,EACtBC,EA1BFC,EAHEC,EAAeN,EAAiBM,aAChCC,GA2BsBJ,EA3BiBG,EAAaE,MA4BpDJ,EAAO,IAAIK,KAAe,IAAVN,IACjBO,QAAQN,EAAKO,UAAY,GACvBP,EAAKQ,UAAY,KA3BpBd,GAAaS,GACfF,EAAM,CACJG,KAAMD,EACNM,KAAMjB,EACNkB,KAAMlB,EACNmB,IAAKnB,EACLoB,MAAOpB,GAETV,QAAQC,IAAI,4BAA6BkB,KAEzCA,EAAG,iBACEC,EADF,CAEDQ,KAAMG,KAAKC,IAAIZ,EAAaQ,KAAMlB,GAClCmB,IAAKE,KAAKE,IAAIb,EAAaS,IAAKnB,GAChCoB,MAAOpB,IAETV,QAAQC,IAAI,0CAA2CS,IAEzDI,EAAiBM,aAAeD,EAGhCL,EAAiBoB,SAASC,SAAQ,SAAAC,GAAO,OAAIA,EAAQC,SAASlB,W,qVCjEjD,eAACmB,GAAD,MAAa,CAC1BC,KAAM,YACNC,SAAU,CACRC,iBAAkB,GAElBC,GAAI,8BAEJH,KAAM,YACNI,YAAa,wBACbC,iBAAkB,YAClBC,aAAc,GAEdC,gBAAgB,EAChBC,iBAAiB,EACjBC,mBAAmB,EAEnBC,YAAY,EACZC,gBAAgB,EAChBC,OAAQ,GAERC,MAAO,CAAC,CACNV,GAAI,SACJW,KAAM,QACL,CACDX,GAAI,cACJW,KAAM,SAGRC,SAAU,CACRC,OAAQ,CACNC,OAAQ,CACNC,UAAW,EACXC,SAAS,EACTC,UAAW,EACXC,SAAU,EACVC,YAAY,EACZC,aAAc,EACdC,MAAO,WAETC,YAAa,CACXC,UAAU,EACVP,SAAS,EACTG,YAAY,IAGhBK,UAAW,EACXf,OAAQ,IAEVI,OAAQ,CACNC,OAAQ,CACNW,MAAO,gBACPC,cAAe,KAIrBC,YAAa,WACXC,KAAKC,KAAO,SAAUC,EAASC,GAC7BH,KAAKI,SAAWF,EAChBF,KAAKK,OAASF,EAEd,IAAMG,EAAStC,EAAOuC,IAAID,OAAON,KAAKI,UAGlCI,EAAIN,EAAQO,OAAOC,OAGjBD,GAFND,EAAIA,EAAEG,UAAU,EAAGH,EAAEI,OAAS,IAEX,WACnBZ,KAAKI,SAASS,QAAQJ,EAAQH,EAAQA,IAGxCN,KAAKc,KAAO,SAAUZ,EAASC,GAK7B,OAJAH,KAAKI,SAAWF,EAChBF,KAAKK,OAASF,EAEdH,KAAKI,SAASW,WAAW,GAClB,CAAC/C,EAAOuC,IAAI/C,MAAMwC,KAAKI,eAK7B,SAAeY,EAAtB,wC,kCAAO,WAAwBC,EAAUX,EAAQG,EAAQS,GAAlD,eAAA7G,EAAA,4DACS,kCACC,2BAFV,kBAKeC,IAAS6G,2DAAkBF,EAAtB,YAA0CR,EAA1C,WAA2DH,EAA3D,UAA2EY,GAL/F,WAKGE,EALH,QAMMC,GANN,sBAMgB5G,MAAM2G,EAAIE,YAN1B,gCAOIF,EAAI5G,QAPR,kCASHkB,QAAQG,MAAR,MATG,2D,+6CCtEP,IAAM0F,EAAgB,IAAI/F,IAEpBgG,EAAoB,CACxBC,sBAAuB,CAAC,KAAM,KAAM,KAAM,MAC1CC,UAAW,CAAC,CACVC,MAAO,WACP1D,KAAM,WACN2D,KAAM,YAER,CAEED,MAAO,SAGP1D,KAAM,SAGN2D,KAAM,4BAGRC,cAAe,CAAC,CACd5D,KAAM,SAGN0D,MAAO,Y,SAMIG,I,iEAAf,oCAAAzH,EAAA,sEACqBF,EAAe,yBADpC,OAIE,IAHM2B,EADR,OAEMiG,EAAa,GAFnB,aAOI,IAPJ,IAIanH,EAJb,QAKUoH,EAAQlG,EAAKmG,KAAKrH,EAAS+G,OAAOK,MAL5C,aAOS,IAAME,EAAY,KACfC,EAAUH,EAAME,GAAcE,KAAI,SAAAC,GACtC,IAAM5B,EAAS9F,EAAeC,EAAS+G,MAAOO,EAAcG,GAC5D,MAAO,CACL5B,OAAQA,EAAO1F,MACfuH,UAAW7B,EAAOzF,KAClBqD,YAAaoC,EAAO1F,MACpBH,SAAUA,EAAS+G,MACnB5C,KAAM,aAGVgD,EAAU,YAAOA,GAAP,EAAsBI,KAXlC,MAA2BI,OAAOC,KAAKR,GAAvC,eAAgD,KAHlD,IAAuBR,EAAkBE,aAAzC,aAAqD,IAJvD,yBAqBSK,GArBT,4C,sBAwBe,IAuFN,EA/DM,EAlBA,EANA,GACbU,QAAS,SAAC1E,GACRrC,QAAQC,IAAI,0BACZ+G,YAAW,kBAAM3E,EAASyD,OAG5BmB,eAAa,cAAE,WACbC,EACAhI,EACAiI,EACAC,GAJa,iBAAAzI,EAAA,6DAMbqB,QAAQC,IAAI,gCANC,SAOSmG,IAPT,OAOPK,EAPO,OAQPY,EAAaZ,EAAQa,QAAO,SAAAvC,GAChC,IAAMwC,EAA+B,KAAbrI,GAAmB6F,EAAO7F,WAAaA,EACzDsI,GAEmC,IAFPzC,EAAO6B,UACtCa,cACAC,QAAQR,EAAUO,eACrB,OAAOF,GAAmBC,KAE5BJ,EAAsBC,GAfT,2CAAF,mDAkBbM,eAAa,cAAE,WACbC,EACAC,EACAC,GAHa,iCAAAnJ,EAAA,yDAKbqB,QAAQC,IAAI,+BAAgC2H,GAL/B,EAQwCrI,EAAgBqI,GAA7D1I,EARK,EAQLA,SAAUC,EARL,EAQKA,WAAYC,EARjB,EAQiBA,WAAUM,EAR3B,EAQ2BA,UAR3B,uBAYLqI,EAAa,CACjBxF,MAHIA,EAAUpD,EAVL,IAUmBC,GAGxB,IAAaM,EACjBiD,YAAgBJ,EAAL,IAAa7C,EACxB2D,KAAM,SACN2E,QAAS,OACTC,SAAU,UACV/I,SAAUA,EACVgJ,OAAQ,EACRC,WAAY,IACZC,cAAc,EACdC,eAAe,EACfC,wBAAwB,EACxBvC,sBAAuBD,EAAkBC,sBACzCwC,iBAAkB,EAClBC,YAAa,aAGfxI,QAAQC,IAAI,mCAAoC2H,GAChDC,EAAyBE,GA9Bd,2CAkCS3B,IAlCT,WAkCPK,EAlCO,OAoCPgC,EAAahC,EAAQiC,MAAK,qBAAG9B,YAA8BgB,KApCpD,wBAsCX5H,QAAQC,IAAI,yCAA0C2H,GACtDE,EAAuB,yBAvCZ,2BA0CPC,EAAa,CACjBxF,KAAMkG,EAAW1D,OACjBpC,YAAa8F,EAAW9F,YACxBU,KAAMoF,EAAWpF,KACjB2E,QAAS,OACTC,SAAU,UACV/I,SAAUuJ,EAAWvJ,SACrBgJ,OAAQ,EACRC,WAAY,IACZC,cAAc,EACdC,eAAe,EACfC,wBAAwB,EACxBvC,sBAAuBD,EAAkBC,sBACzCwC,iBAAkB,EAClBC,YAAa,aAGfxI,QAAQC,IAAI,mCAAoC2H,GAChDC,EAAyBE,GA5DZ,4CAAF,iDA+DbY,SAAO,cAAE,WAAOZ,EAAYa,EAAYC,EAAMC,EAAIC,EAAmBC,EAAiBC,GAA7E,2BAAAtK,EAAA,yDACPqB,QAAQC,IAAI,yBAA0B8H,EAAYa,EAAYC,EAAMC,KAC9DI,EAAe3J,EAAgBwI,EAAWnB,YAe/BlH,SAjBV,iCAkBc4F,EAAQ,iCAAkC,KAAM,UAAW,IAlBzE,cAkBClF,EAlBD,OAoBD+I,EAAO,GAEX/I,EAAK+B,SAAQ,SAAAiH,GACPA,EAAEC,UAAY,KAAQR,GAAQO,EAAEE,SAAW,IAAOR,IACpDK,EAAI,YAAOA,GAAP,CAAa,CACf7H,KAAM8H,EAAEC,UACRvH,MAAOsH,EAAEG,uBAKfR,EAAkBI,EAAM,CAAEK,QAAQ,IA/B7B,kCAmCDC,EAAgB,CACpBC,EAAGR,EAAahK,SAChByK,KAAMT,EAAa/J,WACnByK,KAAMV,EAAa9J,SACnByK,KAAMf,EACNtD,MAAO,KAEHsE,EAAQjD,OAAOC,KAAK2C,GACvB/C,KAAI,SAAAnE,GAAI,OAAOA,EAAP,IAAewH,mBAAmBN,EAAclH,OACxDyH,KAAK,KA5CD,oBA8CcvL,EAAe,iBAAiBqL,GA9C9C,cA8CC1J,EA9CD,QA+CK6J,UAA8B,UAAlB7J,EAAK6J,UAA8C,IAArB7J,EAAKmG,KAAKrB,QA/CzD,wBAiDH6D,EAAkB,GAAI,CACpBS,QAAQ,IAlDP,2BAsDDL,EAAO,GACX/I,EAAKmG,KAAKpE,SAAQ,SAAAhB,GACZA,EAAIG,MAAQuH,GAAQ1H,EAAIG,KAAOwH,IACjCK,EAAI,YAAOA,GAAP,CAAa,CACf7H,KAAiB,IAAXH,EAAIG,KACVO,IAAKV,EAAIU,IACTD,KAAMT,EAAIS,KACVD,KAAMR,EAAIQ,KACVG,MAAOX,EAAIW,aAIbmH,GACFpD,EAAcqE,IAAInC,EAAWnB,UAA7B,iBACKuC,EAAKA,EAAKjE,OAAS,KAG1BlF,QAAQC,IAAR,uBAAmCkJ,EAAKjE,OAAxC,WACA6D,EAAkBI,EAAM,CACtBK,QAAQ,IAzEL,mDA4ELxJ,QAAQC,IAAI,uBAAZ,MACA+I,EAAgB,EAAD,IA7EV,2DAAF,yDAiFPmB,cAAe,SACbpC,EACAa,EACAwB,EACAC,EACAC,GAEAtK,QAAQC,IAAI,kDAAmDoK,GAE1C9K,EAAgBwI,EAAWnB,WAAxClH,UFvKL,SACLqI,EACAa,EACAwB,EACAC,EACAC,EACAlJ,GAEA,IAAM8H,EAAe3J,EAAgBwI,EAAWnB,WAC1C/F,EAAa,KAAQqI,EAAahK,SAArB,IAAiCgK,EAAa/J,WAA9C,IAA4D+J,EAAa9J,SACtFgD,EAAU,CACdM,GAAI2H,EACJhI,SAAU+H,GAERtJ,EAAmBjB,EAAsBkB,IAAIF,GAC7CC,EAEFA,EAAiBoB,SAASqI,KAAKnI,IAGjCtB,EAAmB,CACjBuJ,eACAzB,aACAxH,eACAc,SAAU,CAACE,IAEbvC,EAAsBqK,IAAIrJ,EAAeC,GACzCd,QAAQC,IAAI,oDAAqDY,GACjElB,EAAO6K,KAAK,SAAU,CAAEC,KAAM,CAAC5J,ME8I3B6J,CACE3C,EACAa,EACAwB,EACAC,EACAC,EACAzE,EAAc9E,IAAIgH,EAAWnB,aAKnC+D,gBAAiB,SAACC,GAChB5K,QAAQC,IAAI,qDAAsD2K,GFvJ/D,SAAgCA,GAErC,cAA4B/K,EAAsBiH,UAAlD,aAA0D,CAAC,IAAhDjG,EAA+C,QAClDC,EAAmBjB,EAAsBkB,IAAIF,GAC7CgK,EAAe/J,EAAiBoB,SACnC4I,WAAU,SAAA1I,GAAO,OAAIA,EAAQM,KAAOkI,KAEvC,IAAsB,IAAlBC,IAEF/J,EAAiBoB,SAAS6I,OAAOF,EAAc,GAEN,IAArC/J,EAAiBoB,SAASgD,QAAc,CAE1ClF,QAAQC,IAAI,0DAA2DY,GACvElB,EAAO6K,KAAK,YAAa,CAAEC,KAAM,CAAC5J,KAClChB,EAAsBmL,OAAOnK,GAC7B,QEwIJoK,CAAsBL,K,IC3PlBM,EAAWC,aAAS,kBAAM,wCAAmD,CAAEC,KAAK,IAApFF,O,IAQaG,E,4JAqBpBC,SAAW,K,oHAEXC,kBAAA,WACE,IA5BKC,EA4BCC,EAAgB,CACpB1G,OAAQT,KAAKoH,MAAM3G,OACnB4G,SAAUC,EACVC,SAAUvH,KAAKoH,MAAMG,SACrBC,aAAcxH,KAAKoH,MAAMK,YACzBC,aAAc1H,KAAKoH,MAAMO,YAEzBC,QAnCGV,EADQ,IAAIW,OAAO,uBACHC,KAAKC,OAAOC,SAASC,SACxB,OAAZf,EAAmB,KAAOgB,mBAAmBhB,EAAQ,GAAGiB,QAAQ,MAAO,QAkC3C,MAChCC,kBAAmB,CAAC,iCACpBC,iBAAkB,CAAC,mBACnBC,mBAAoBtI,KAAKoH,MAAMmB,iBAC/BC,2BAA4BxI,KAAKoH,MAAMqB,wBACvCC,UAAW1I,KAAKoH,MAAMuB,SACtBC,QAAS5I,KAAKoH,MAAMyB,OACpBC,WAAY9I,KAAKoH,MAAM0B,WACvBC,SAAU/I,KAAKoH,MAAM2B,SACrBC,kBAAmBhJ,KAAKoH,MAAM6B,iBAC9BC,yBAA0BlJ,KAAKoH,MAAM+B,wBAGjCnC,EAAW,IAAIJ,EAAOO,GAC5BnH,KAAKgH,SAAWA,EAEhBA,EAASoC,cAAa,WACpBpC,EAASqC,cAAcC,MAAK,WAC1B,IAAMC,EAASvC,EAASwC,eACxBD,EAAOE,aAAa,QAAS,sCAC7BF,EAAOG,UAAUC,IAAI,wBACrBJ,EAAOK,iBAAiB,SAAS,kBAAM5C,EAAS6C,iBAAiB,CAC/DhK,MAAO,eACPiK,KAAM,mDACN/L,SAAU,WACRrC,QAAQC,IAAI,kBAIhB4N,EAAOQ,UAAY,gBAGrB/C,EAASgD,QAAQC,YAAY,yBAAyB,GAAO,O,EAIjEC,qBAAA,WACwB,OAAlBlK,KAAKgH,WACPhH,KAAKgH,SAASmD,SACdnK,KAAKgH,SAAW,O,EAIpBoD,OAAA,WACE,OACD,uBAAKhM,GAAI4B,KAAKoH,MAAMK,YAAa4C,UAAU,0C,GA5ECC,iBAAzBvD,EACbwD,aAAe,CACpB9J,OAAQ,mBACR8G,SAAU,KACVE,YAAa,qBACbE,YAAa,qBACbY,iBAAkB,mCAClBE,wBAAyB,MACzBE,SAAU,kBACVE,OAAQ,iBACRC,YAAY,EACZC,UAAU,EACVE,iBAAkB,GAClBE,uBAAwB,SAAUnL,GAChC,OAAOwM,QAAQC,QAAQ,CACrBC,EAAU1M,O,ICzBI2M,E,gLACnBP,OAAA,WACE,OACE,kBAACQ,EAAA,EAAD,CAAQC,kBAAkB,GACxB,yBAAKR,UAAU,kBACb,kBAAC,EAAD,S,GAL0BS","file":"component---src-pages-chart-1-js-0c7a4197d874f079d944.js","sourcesContent":["// Make requests to CryptoCompare API\nexport async function makeApiRequest (path) {\n  try {\n    const response = await fetch(`https://min-api.cryptocompare.com/${path}`)\n    return response.json()\n  } catch (error) {\n    throw new Error(`CryptoCompare request error: ${error.status}`)\n  }\n}\n\n// Generate a symbol ID from a pair of the coins\nexport function generateSymbol (exchange, fromSymbol, toSymbol) {\n  const short = `${fromSymbol}/${toSymbol}`\n  return {\n    short,\n    full: `${exchange}:${short}`,\n  }\n}\n\nexport function parseFullSymbol (fullSymbol) {\n  const match = fullSymbol.match(/^(\\w+):(\\w+)\\/(\\w+)(?:#(\\w+))?$/)\n  if (!match) {\n    return null\n  }\n\n  return {\n    exchange: match[1],\n    fromSymbol: match[2],\n    toSymbol: match[3],\n    fragment: match[4],\n  }\n}\n","import { parseFullSymbol } from './helpers.js'\n\nconst socket = io('wss://streamer.cryptocompare.com')\nconst channelToSubscription = new Map()\n\nsocket.on('connect', () => {\n  console.log('[socket] Connected')\n})\n\nsocket.on('disconnect', (reason) => {\n  console.log('[socket] Disconnected:', reason)\n})\n\nsocket.on('error', (error) => {\n  console.log('[socket] Error:', error)\n})\n\nsocket.on('m', data => {\n  console.log('[socket] Message:', data)\n  const [\n    eventTypeStr,\n    exchange,\n    fromSymbol,\n    toSymbol,\n    ,\n    ,\n    tradeTimeStr,\n    ,\n    tradePriceStr,\n  ] = data.split('~')\n\n  if (parseInt(eventTypeStr) !== 0) {\n    // skip all non-TRADE events\n    return\n  }\n  const tradePrice = parseFloat(tradePriceStr)\n  const tradeTime = parseInt(tradeTimeStr)\n  const channelString = `0~${exchange}~${fromSymbol}~${toSymbol}`\n  const subscriptionItem = channelToSubscription.get(channelString)\n  if (subscriptionItem === undefined) {\n    return\n  }\n  const lastDailyBar = subscriptionItem.lastDailyBar\n  const nextDailyBarTime = getNextDailyBarTime(lastDailyBar.time)\n\n  let bar\n  if (tradeTime >= nextDailyBarTime) {\n    bar = {\n      time: nextDailyBarTime,\n      open: tradePrice,\n      high: tradePrice,\n      low: tradePrice,\n      close: tradePrice,\n    }\n    console.log('[socket] Generate new bar', bar)\n  } else {\n    bar = {\n      ...lastDailyBar,\n      high: Math.max(lastDailyBar.high, tradePrice),\n      low: Math.min(lastDailyBar.low, tradePrice),\n      close: tradePrice,\n    }\n    console.log('[socket] Update the latest bar by price', tradePrice)\n  }\n  subscriptionItem.lastDailyBar = bar\n\n  // send data to every subscriber of that symbol\n  subscriptionItem.handlers.forEach(handler => handler.callback(bar))\n})\n\nfunction getNextDailyBarTime (barTime) {\n  const date = new Date(barTime * 1000)\n  date.setDate(date.getDate() + 1)\n  return date.getTime() / 1000\n}\n\nexport function subscribeOnStream (\n  symbolInfo,\n  resolution,\n  onRealtimeCallback,\n  subscribeUID,\n  onResetCacheNeededCallback,\n  lastDailyBar,\n) {\n  const parsedSymbol = parseFullSymbol(symbolInfo.full_name)\n  const channelString = `0~${parsedSymbol.exchange}~${parsedSymbol.fromSymbol}~${parsedSymbol.toSymbol}`\n  const handler = {\n    id: subscribeUID,\n    callback: onRealtimeCallback,\n  }\n  let subscriptionItem = channelToSubscription.get(channelString)\n  if (subscriptionItem) {\n    // already subscribed to the channel, use the existing subscription\n    subscriptionItem.handlers.push(handler)\n    return\n  }\n  subscriptionItem = {\n    subscribeUID,\n    resolution,\n    lastDailyBar,\n    handlers: [handler],\n  }\n  channelToSubscription.set(channelString, subscriptionItem)\n  console.log('[subscribeBars]: Subscribe to streaming. Channel:', channelString)\n  socket.emit('SubAdd', { subs: [channelString] })\n}\n\nexport function unsubscribeFromStream (subscriberUID) {\n  // find a subscription with id === subscriberUID\n  for (const channelString of channelToSubscription.keys()) {\n    const subscriptionItem = channelToSubscription.get(channelString)\n    const handlerIndex = subscriptionItem.handlers\n      .findIndex(handler => handler.id === subscriberUID)\n\n    if (handlerIndex !== -1) {\n      // remove from handlers\n      subscriptionItem.handlers.splice(handlerIndex, 1)\n\n      if (subscriptionItem.handlers.length === 0) {\n        // unsubscribe from the channel, if it was the last handler\n        console.log('[unsubscribeBars]: Unsubscribe from streaming. Channel:', channelString)\n        socket.emit('SubRemove', { subs: [channelString] })\n        channelToSubscription.delete(channelString)\n        break\n      }\n    }\n  }\n}\n","import fetch from 'node-fetch'\n\nexport default (PineJS) => ({\n  name: 'BinanceOI',\n  metainfo: {\n    _metainfoVersion: 42,\n\n    id: 'BinanceOI@tv-basicstudies-1',\n\n    name: 'BinanceOI',\n    description: 'Binance Open Interest',\n    shortDescription: 'BinanceOI',\n    scriptIdPart: '',\n\n    is_price_study: false,\n    is_hidden_study: true,\n    isCustomIndicator: true,\n\n    isTVScript: false,\n    isTVScriptStub: false,\n    inputs: [],\n\n    plots: [{\n      id: 'plot_0',\n      type: 'line',\n    }, {\n      id: 'plot_hidden',\n      type: 'line',\n    }],\n\n    defaults: {\n      styles: {\n        plot_0: {\n          linestyle: 0,\n          visible: !0,\n          linewidth: 2,\n          plottype: 2,\n          trackPrice: !1,\n          transparency: 0,\n          color: '#63c5ff',\n        },\n        plot_hidden: {\n          isHidden: !0,\n          visible: !1,\n          trackPrice: !1,\n        },\n      },\n      precision: 0,\n      inputs: {},\n    },\n    styles: {\n      plot_0: {\n        title: 'Open interest',\n        histogramBase: 0,\n      },\n    },\n  },\n  constructor: function () {\n    this.init = function (context, input) {\n      this._context = context\n      this._input = input\n\n      const period = PineJS.Std.period(this._context)\n\n      // https://github.com/tradingview/charting_library/issues/4019\n      let t = context.symbol.ticker\n      t = t.substring(1, t.length - 2)\n\n      const symbol = t + '#BUYSELL'\n      this._context.new_sym(symbol, period, period)\n    }\n\n    this.main = function (context, input) {\n      this._context = context\n      this._input = input\n\n      this._context.select_sym(1)\n      return [PineJS.Std.close(this._context)]\n    }\n  },\n})\n\nexport async function makeReq (endpoint, period, symbol, limit) {\n  const proxy = 'https://blep-cors.herokuapp.com'\n  const bnbAPI = 'https://fapi.binance.com'\n\n  try {\n    const res = await fetch(`${proxy}/${bnbAPI}${endpoint}/?symbol=${symbol}&period=${period}&limit=${limit}`)\n    if (!res.ok) throw Error(res.statusText)\n    return res.json()\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport const x = [{\n  name: 'Social index',\n  metainfo: {\n    _metainfoVersion: 40,\n    id: 'BuySell@tv-basicstudies-1',\n    scriptIdPart: '',\n    name: 'Social index',\n    description: 'Social index',\n    shortDescription: 'Social index',\n    is_hidden_study: !0,\n    is_price_study: !1,\n    isCustomIndicator: !0,\n    plots: [{\n      id: 'plot_0',\n      type: 'line',\n    }, {\n      id: 'plot_hidden',\n      type: ' line',\n    }],\n    defaults: {\n      styles: {\n        plot_0: {\n          linestyle: 0,\n          visible: !0,\n          linewidth: 1,\n          plottype: 5,\n          trackPrice: !1,\n          transparency: 0,\n          color: '#6FCF97',\n        },\n        plot_hidden: {\n          isHidden: !0,\n          visible: !1,\n          trackPrice: !1,\n        },\n      },\n      precision: 2,\n      inputs: {},\n    },\n    styles: {\n      plot_0: {\n        title: 'Social index',\n        histogramBase: 0,\n      },\n    },\n    inputs: [],\n  },\n  constructor: function () {\n    this.init = function (t, n) {\n      this._context = t,\n      this._input = n\n      var a = e.Std.period(this._context)\n      var r = t.symbol.ticker + '#BUYSELL'\n      this._context.new_sym(r, a, a)\n    }\n    ,\n    this.main = function (t, n) {\n      return this._context = t,\n      this._input = n,\n      this._context.select_sym(1),\n      [e.Std.close(this._context)]\n    }\n  },\n}, {\n  name: 'Open interest',\n  metainfo: {\n    _metainfoVersion: 40,\n    id: 'Oi@tv-basicstudies-1',\n    scriptIdPart: '',\n    name: 'Open interest',\n    description: 'Open interest',\n    shortDescription: 'Open interest',\n    is_hidden_study: !0,\n    is_price_study: !1,\n    isCustomIndicator: !0,\n    plots: [{\n      id: 'plot_0',\n      type: 'line',\n    }, {\n      id: 'plot_hidden',\n      type: 'line',\n    }],\n    defaults: {\n      styles: {\n        plot_0: {\n          linestyle: 0,\n          visible: !0,\n          linewidth: 2,\n          plottype: 2,\n          trackPrice: !1,\n          transparency: 0,\n          color: '#63c5ff',\n        },\n        plot_hidden: {\n          isHidden: !0,\n          visible: !1,\n          trackPrice: !1,\n        },\n      },\n      precision: 0,\n      inputs: {},\n    },\n    styles: {\n      plot_0: {\n        title: 'Open interest',\n        histogramBase: 0,\n      },\n    },\n    inputs: [],\n  },\n  constructor: function () {\n    this.init = function (t, n) {\n      this._context = t,\n      this._input = n\n      var a = e.Std.period(this._context)\n      var r = t.symbol.ticker + '#OI'\n      this._context.new_sym(r, a, a)\n    }\n    ,\n    this.main = function (t, n) {\n      return this._context = t,\n      this._input = n,\n      this._context.select_sym(1),\n      [e.Std.close(this._context)]\n    }\n  },\n}, {\n  name: 'Open Value',\n  metainfo: {\n    _metainfoVersion: 40,\n    id: 'Ov@tv-basicstudies-1',\n    scriptIdPart: '',\n    name: 'Open Value',\n    description: 'Open Value',\n    shortDescription: 'Open Value',\n    is_hidden_study: !0,\n    is_price_study: !1,\n    isCustomIndicator: !0,\n    plots: [{\n      id: 'plot_0',\n      type: 'line',\n    }, {\n      id: 'plot_hidden',\n      type: 'line',\n    }],\n    defaults: {\n      styles: {\n        plot_0: {\n          linestyle: 0,\n          visible: !0,\n          linewidth: 2,\n          plottype: 2,\n          trackPrice: !1,\n          transparency: 0,\n          color: '#FFC62A',\n        },\n        plot_hidden: {\n          isHidden: !0,\n          visible: !1,\n          trackPrice: !1,\n        },\n      },\n      precision: 0,\n      inputs: {},\n    },\n    styles: {\n      plot_0: {\n        title: 'Open interest',\n        histogramBase: 0,\n      },\n    },\n    inputs: [],\n  },\n  constructor: function () {\n    this.init = function (t, n) {\n      this._context = t,\n      this._input = n\n      var a = e.Std.period(this._context)\n      var r = t.symbol.ticker + '#OV'\n      this._context.new_sym(r, a, a)\n    }\n    ,\n    this.main = function (t, n) {\n      return this._context = t,\n      this._input = n,\n      this._context.select_sym(1),\n      [e.Std.close(this._context)]\n    }\n  },\n}, {\n  name: 'Fear & Greed Index',\n  metainfo: {\n    _metainfoVersion: 40,\n    id: 'Fg@tv-basicstudies-1',\n    scriptIdPart: '',\n    name: 'Fear & Greed Index',\n    description: 'Fear & Greed Index',\n    shortDescription: 'Fear & Greed Index',\n    is_hidden_study: !0,\n    is_price_study: !1,\n    isCustomIndicator: !0,\n    plots: [{\n      id: 'plot_0',\n      type: 'line',\n    }, {\n      id: 'plot_hidden',\n      type: 'line',\n    }],\n    defaults: {\n      styles: {\n        plot_0: {\n          linestyle: 0,\n          visible: !0,\n          linewidth: 2,\n          plottype: 5,\n          trackPrice: !1,\n          transparency: 0,\n          color: '#6FCF97',\n        },\n        plot_hidden: {\n          isHidden: !0,\n          visible: !1,\n          trackPrice: !1,\n        },\n      },\n      precision: 0,\n      inputs: {},\n    },\n    styles: {\n      plot_0: {\n        title: 'Fear & Greed Index',\n        histogramBase: 50,\n      },\n    },\n    inputs: [],\n  },\n  constructor: function () {\n    this.init = function (t, n) {\n      this._context = t,\n      this._input = n\n      var a = e.Std.period(this._context)\n      var r = t.symbol.ticker + '#FG'\n      this._context.new_sym(r, a, a)\n    }\n    ,\n    this.main = function (t, n) {\n      this._context = t,\n      this._input = n,\n      this._context.select_sym(1)\n      var a = e.Std.close(this._context)\n      return [a === 50 ? 51 : a]\n    }\n  },\n}, {\n  name: 'Bitmex Liquidations',\n  metainfo: {\n    _metainfoVersion: 40,\n    id: 'Liq@tv-basicstudies-1',\n    scriptIdPart: '',\n    name: 'Bitmex Liquidations',\n    description: 'Bitmex Liquidations',\n    shortDescription: 'Bitmex Liquidations',\n    is_hidden_study: !0,\n    is_price_study: !1,\n    isCustomIndicator: !0,\n    plots: [{\n      id: 'plot_0',\n      type: 'line',\n    }, {\n      id: 'plot_1',\n      type: 'line',\n    }],\n    defaults: {\n      styles: {\n        plot_0: {\n          linestyle: 0,\n          visible: !0,\n          linewidth: 1,\n          plottype: 5,\n          trackPrice: !1,\n          transparency: 0,\n          color: '#6FCF97',\n        },\n        plot_1: {\n          linestyle: 0,\n          visible: !0,\n          linewidth: 1,\n          plottype: 5,\n          trackPrice: !1,\n          transparency: 0,\n          color: '#EB5757',\n        },\n      },\n      precision: 0,\n      inputs: {},\n    },\n    styles: {\n      plot_0: {\n        title: 'Bitmex Liquidations (Short)',\n        histogramBase: 0,\n      },\n      plot_1: {\n        title: 'Bitmex Liquidations (Long)',\n        histogramBase: 0,\n      },\n    },\n    inputs: [],\n  },\n  constructor: function () {\n    this.init = function (t, n) {\n      this._context = t,\n      this._input = n\n      var a = e.Std.period(this._context)\n      var r = t.symbol.ticker + '#LIQ'\n      this._context.new_sym(r, a, a)\n    }\n    ,\n    this.main = function (t, n) {\n      this._context = t,\n      this._input = n,\n      this._context.select_sym(1)\n      var a = e.Std.close(this._context)\n      return [e.Std.open(this._context) || 0, -a || 0]\n    }\n  },\n}]\n","import {\n  makeApiRequest,\n  generateSymbol,\n  parseFullSymbol,\n} from './helpers.js'\nimport {\n  subscribeOnStream,\n  unsubscribeFromStream,\n} from './streaming.js'\n\nimport { makeReq } from './indicators/binance_open_interest'\n\nconst lastBarsCache = new Map()\n\nconst configurationData = {\n  supported_resolutions: ['1S', '1D', '1W', '1M'],\n  exchanges: [{\n    value: 'Bitfinex',\n    name: 'Bitfinex',\n    desc: 'Bitfinex',\n  },\n  {\n    // `exchange` argument for the `searchSymbols` method, if a user selects this exchange\n    value: 'Kraken',\n\n    // filter name\n    name: 'Kraken',\n\n    // full exchange name displayed in the filter popup\n    desc: 'Kraken bitcoin exchange',\n  },\n  ],\n  symbols_types: [{\n    name: 'crypto',\n\n    // `symbolType` argument for the `searchSymbols` method, if a user selects this symbol type\n    value: 'crypto',\n  },\n    // ...\n  ],\n}\n\nasync function getAllSymbols () {\n  const data = await makeApiRequest('data/v3/all/exchanges')\n  let allSymbols = []\n\n  for (const exchange of configurationData.exchanges) {\n    const pairs = data.Data[exchange.value].pairs\n\n    for (const leftPairPart of Object.keys(pairs)) {\n      const symbols = pairs[leftPairPart].map(rightPairPart => {\n        const symbol = generateSymbol(exchange.value, leftPairPart, rightPairPart)\n        return {\n          symbol: symbol.short,\n          full_name: symbol.full,\n          description: symbol.short,\n          exchange: exchange.value,\n          type: 'crypto',\n        }\n      })\n      allSymbols = [...allSymbols, ...symbols]\n    }\n  }\n  return allSymbols\n}\n\nexport default {\n  onReady: (callback) => {\n    console.log('[onReady]: Method call')\n    setTimeout(() => callback(configurationData))\n  },\n\n  searchSymbols: async (\n    userInput,\n    exchange,\n    symbolType,\n    onResultReadyCallback,\n  ) => {\n    console.log('[searchSymbols]: Method call')\n    const symbols = await getAllSymbols()\n    const newSymbols = symbols.filter(symbol => {\n      const isExchangeValid = exchange === '' || symbol.exchange === exchange\n      const isFullSymbolContainsInput = symbol.full_name\n        .toLowerCase()\n        .indexOf(userInput.toLowerCase()) !== -1\n      return isExchangeValid && isFullSymbolContainsInput\n    })\n    onResultReadyCallback(newSymbols)\n  },\n\n  resolveSymbol: async (\n    symbolName,\n    onSymbolResolvedCallback,\n    onResolveErrorCallback,\n  ) => {\n    console.log('[resolveSymbol]: Method call', symbolName)\n\n    // If fragment exists in symbolName, then it's an indicator ticker and shouldn't query the symbol list\n    const { exchange, fromSymbol, toSymbol, fragment } = parseFullSymbol(symbolName)\n    if (fragment) {\n      const name = `${fromSymbol}/${toSymbol}`\n\n      const symbolInfo = {\n        name: `${name}#${fragment}`,\n        description: `${name}#${fragment}`,\n        type: 'crypto',\n        session: '24x7',\n        timezone: 'Etc/UTC',\n        exchange: exchange,\n        minmov: 1,\n        pricescale: 100,\n        has_intraday: false,\n        has_no_volume: true,\n        has_weekly_and_monthly: false,\n        supported_resolutions: configurationData.supported_resolutions,\n        volume_precision: 2,\n        data_status: 'streaming',\n      }\n\n      console.log('[resolveSymbol]: Symbol resolved', symbolName)\n      onSymbolResolvedCallback(symbolInfo)\n      return\n    }\n\n    const symbols = await getAllSymbols()\n\n    const symbolItem = symbols.find(({ full_name }) => full_name === symbolName)\n    if (!symbolItem) {\n      console.log('[resolveSymbol]: Cannot resolve symbol', symbolName)\n      onResolveErrorCallback('cannot resolve symbol')\n      return\n    }\n    const symbolInfo = {\n      name: symbolItem.symbol,\n      description: symbolItem.description,\n      type: symbolItem.type,\n      session: '24x7',\n      timezone: 'Etc/UTC',\n      exchange: symbolItem.exchange,\n      minmov: 1,\n      pricescale: 100,\n      has_intraday: false,\n      has_no_volume: true,\n      has_weekly_and_monthly: false,\n      supported_resolutions: configurationData.supported_resolutions,\n      volume_precision: 2,\n      data_status: 'streaming',\n    }\n\n    console.log('[resolveSymbol]: Symbol resolved', symbolName)\n    onSymbolResolvedCallback(symbolInfo)\n  },\n\n  getBars: async (symbolInfo, resolution, from, to, onHistoryCallback, onErrorCallback, firstDataRequest) => {\n    console.log('[getBars]: Method call', symbolInfo, resolution, from, to)\n    const parsedSymbol = parseFullSymbol(symbolInfo.full_name)\n\n    // for debugging ths chart output\n    /* function randomBars (from, to) {\n      let bars = []\n      for (let t = from; t < to; t += 86400) { // from/to are in seconds\n        bars = [...bars, {\n          time: t * 1000, // milliseconds\n          close: Math.random() * 100,\n        }]\n      }\n      return bars\n\t\t} */\n\n    // if it has fragment then it's an indicator symbol\n    if (parsedSymbol.fragment) {\n      const data = await makeReq('/futures/data/openInterestHist', '1d', 'BTCUSDT', 30)\n\n      let bars = []\n\n      data.forEach(b => {\n        if (b.timestamp / 1000 >= from && b.timstamp / 1000 < to) {\n          bars = [...bars, {\n            time: b.timestamp,\n            close: b.sumOpenInterest,\n          }]\n        }\n      })\n\n      onHistoryCallback(bars, { noData: false })\n      return\n    }\n\n    const urlParameters = {\n      e: parsedSymbol.exchange,\n      fsym: parsedSymbol.fromSymbol,\n      tsym: parsedSymbol.toSymbol,\n      toTs: to,\n      limit: 2000,\n    }\n    const query = Object.keys(urlParameters)\n      .map(name => `${name}=${encodeURIComponent(urlParameters[name])}`)\n      .join('&')\n    try {\n      const data = await makeApiRequest(`data/histoday?${query}`)\n      if ((data.Response && data.Response === 'Error') || data.Data.length === 0) {\n        // \"noData\" should be set if there is no data in the requested period.\n        onHistoryCallback([], {\n          noData: true,\n        })\n        return\n      }\n      let bars = []\n      data.Data.forEach(bar => {\n        if (bar.time >= from && bar.time < to) {\n          bars = [...bars, {\n            time: bar.time * 1000,\n            low: bar.low,\n            high: bar.high,\n            open: bar.open,\n            close: bar.close,\n          }]\n        }\n      })\n      if (firstDataRequest) {\n        lastBarsCache.set(symbolInfo.full_name, {\n          ...bars[bars.length - 1],\n        })\n      }\n      console.log(`[getBars]: returned ${bars.length} bar(s)`)\n      onHistoryCallback(bars, {\n        noData: false,\n      })\n    } catch (error) {\n      console.log('[getBars]: Get error', error)\n      onErrorCallback(error)\n    }\n  },\n\n  subscribeBars: (\n    symbolInfo,\n    resolution,\n    onRealtimeCallback,\n    subscribeUID,\n    onResetCacheNeededCallback,\n  ) => {\n    console.log('[subscribeBars]: Method call with subscribeUID:', subscribeUID)\n\n    const { fragment } = parseFullSymbol(symbolInfo.full_name)\n\n    if (!fragment) {\n      subscribeOnStream(\n        symbolInfo,\n        resolution,\n        onRealtimeCallback,\n        subscribeUID,\n        onResetCacheNeededCallback,\n        lastBarsCache.get(symbolInfo.full_name),\n      )\n    }\n  },\n\n  unsubscribeBars: (subscriberUID) => {\n    console.log('[unsubscribeBars]: Method call with subscriberUID:', subscriberUID)\n    unsubscribeFromStream(subscriberUID)\n  },\n}\n","import * as React from 'react'\n// import './index.css'\n\nimport loadable from '@loadable/component'\nimport Datafeed from './datafeed'\n\nimport BinanceOI from './indicators/binance_open_interest'\n// import { widget } from './charting_library/charting_library.min'\nconst { widget } = loadable(() => import('./charting_library/charting_library.min'), { ssr: false })\n\nfunction getLanguageFromURL () {\n  const regex = new RegExp('[\\\\?&]lang=([^&#]*)')\n  const results = regex.exec(window.location.search)\n  return results === null ? null : decodeURIComponent(results[1].replace(/\\+/g, ' '))\n}\n\nexport default class TVChartContainer extends React.PureComponent {\n\tstatic defaultProps = {\n\t  symbol: 'Bitfinex:BTC/USD',\n\t  interval: '1D',\n\t  containerId: 'tv_chart_container',\n\t  libraryPath: '/charting_library/',\n\t  chartsStorageUrl: 'https://saveload.tradingview.com',\n\t  chartsStorageApiVersion: '1.1',\n\t  clientId: 'tradingview.com',\n\t  userId: 'public_user_id',\n\t  fullscreen: false,\n\t  autosize: true,\n\t  studiesOverrides: {},\n\t  customIndicatorsGetter: function (PineJS) {\n\t    return Promise.resolve([\n\t      BinanceOI(PineJS),\n\t      // *** your indicator object, created from the template ***\n\t    ])\n\t  },\n\t};\n\n\ttvWidget = null;\n\n\tcomponentDidMount () {\n\t  const widgetOptions = {\n\t    symbol: this.props.symbol,\n\t    datafeed: Datafeed,\n\t    interval: this.props.interval,\n\t    container_id: this.props.containerId,\n\t    library_path: this.props.libraryPath,\n\n\t    locale: getLanguageFromURL() || 'en',\n\t    disabled_features: ['use_localstorage_for_settings'],\n\t    enabled_features: ['study_templates'],\n\t    charts_storage_url: this.props.chartsStorageUrl,\n\t    charts_storage_api_version: this.props.chartsStorageApiVersion,\n\t    client_id: this.props.clientId,\n\t    user_id: this.props.userId,\n\t    fullscreen: this.props.fullscreen,\n\t    autosize: this.props.autosize,\n\t    studies_overrides: this.props.studiesOverrides,\n\t    custom_indicators_getter: this.props.customIndicatorsGetter,\n\t  }\n\n\t  const tvWidget = new widget(widgetOptions)\n\t  this.tvWidget = tvWidget\n\n\t  tvWidget.onChartReady(() => {\n\t    tvWidget.headerReady().then(() => {\n\t      const button = tvWidget.createButton()\n\t      button.setAttribute('title', 'Click to show a notification popup')\n\t      button.classList.add('apply-common-tooltip')\n\t      button.addEventListener('click', () => tvWidget.showNoticeDialog({\n\t        title: 'Notification',\n\t        body: 'TradingView Charting Library API works correctly',\n\t        callback: () => {\n\t          console.log('Noticed!')\n\t        },\n\t      }))\n\n\t      button.innerHTML = 'Custom Btn'\n\t    })\n\n\t    tvWidget.chart().createStudy('Binance Open Interest', false, true)\n\t  })\n\t}\n\n\tcomponentWillUnmount () {\n\t  if (this.tvWidget !== null) {\n\t    this.tvWidget.remove()\n\t    this.tvWidget = null\n\t  }\n\t}\n\n\trender () {\n\t  return (\n  <div id={this.props.containerId} className='self-stretch w-full TVChartContainer' />\n\t  )\n\t}\n}\n","import React, { Component } from 'react'\nimport Layout from '../components/Layout'\n// import './App.css'\n\nimport TVChartContainer from '../components/TVChartContainer'\n\nexport default class Chart1 extends Component {\n  render () {\n    return (\n      <Layout includePreFooter={false}>\n        <div className='flex flex-grow'>\n          <TVChartContainer />\n        </div>\n      </Layout>\n    )\n  }\n}\n"],"sourceRoot":""}